head(baseline_predictions_df)
names(baseline_predictions_df) <- c('low95','mean', 'high95')
head(baseline_predictions_df)
# plotting
{
library(ggplot2)
names(baseline_predictions_df) = c('low','mean', 'high')
baseline_df_subset = subset(baseline_df, baseline_df$radius == 0.5)
baseline_predictions_df_subset = baseline_predictions_df[1:nrow(baseline_df_subset),]
baseline_predictions_df_subset$angle = baseline_df$angle[1:nrow(baseline_df_subset)]
baseline_predictions_df_subset$radius = baseline_df$radius[1:nrow(baseline_df_subset)]
library(ggplot2)
ggplot() +
geom_point(data = baseline_df_subset, aes(x = angle, y = deviation), col = 'grey70', size = 1) +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = mean),
col = 'tomato', show.legend = FALSE) +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = low),
col = 'tomato', linetype = 'dashed') +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = high),
col = 'tomato', linetype = 'dashed') +
scale_x_continuous(breaks = c(0, pi/2, pi, 3*pi/2, 2*pi),
labels = c(0,expression(pi/2), expression(pi),
expression(3*pi/2), expression(2*pi))) +
labs(x = expression(theta), y = 'Deviation (in.)')  +
theme(axis.text	= element_text(size = 16),
axis.title = element_text(size = 20),
legend.text = element_text(size = 18)) +
scale_linetype_manual(values = c('dashed', 'solid'))
}
baseline_model
# -- How to crete the baseline model
baseline_model = POST('api.amapi.io/v1/models?shape=circle&process=c')
# -- Getting and plotting predictions
baseline_predictions = GET('api.amapi.io/v1/predict?shape=circle&process=c')
names(baseline_predictions_df) <- c('low','mean', 'high')
head(baseline_predictions_df)
# plotting
{
library(ggplot2)
names(baseline_predictions_df) = c('low','mean', 'high')
baseline_df_subset = subset(baseline_df, baseline_df$radius == 0.5)
baseline_predictions_df_subset = baseline_predictions_df[1:nrow(baseline_df_subset),]
baseline_predictions_df_subset$angle = baseline_df$angle[1:nrow(baseline_df_subset)]
baseline_predictions_df_subset$radius = baseline_df$radius[1:nrow(baseline_df_subset)]
library(ggplot2)
ggplot() +
geom_point(data = baseline_df_subset, aes(x = angle, y = deviation), col = 'grey70', size = 1) +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = mean),
col = 'tomato', show.legend = FALSE) +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = low),
col = 'tomato', linetype = 'dashed') +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = high),
col = 'tomato', linetype = 'dashed') +
scale_x_continuous(breaks = c(0, pi/2, pi, 3*pi/2, 2*pi),
labels = c(0,expression(pi/2), expression(pi),
expression(3*pi/2), expression(2*pi))) +
labs(x = expression(theta), y = 'Deviation (in.)')  +
theme(axis.text	= element_text(size = 16),
axis.title = element_text(size = 20),
legend.text = element_text(size = 18)) +
scale_linetype_manual(values = c('dashed', 'solid'))
}
# -- Getting and plotting predictions
baseline_predictions = GET('api.amapi.io/v1/predict?shape=circle&process=c')
baseline_predictions_df = read.csv(textConnection(content(baseline_predictions, 'text')),
header = FALSE)
names(baseline_predictions_df) <- c('low','mean', 'high')
head(baseline_predictions_df)
# plotting
{
library(ggplot2)
names(baseline_predictions_df) = c('low','mean', 'high')
baseline_df_subset = subset(baseline_df, baseline_df$radius == 0.5)
baseline_predictions_df_subset = baseline_predictions_df[1:nrow(baseline_df_subset),]
baseline_predictions_df_subset$angle = baseline_df$angle[1:nrow(baseline_df_subset)]
baseline_predictions_df_subset$radius = baseline_df$radius[1:nrow(baseline_df_subset)]
library(ggplot2)
ggplot() +
geom_point(data = baseline_df_subset, aes(x = angle, y = deviation), col = 'grey70', size = 1) +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = mean),
col = 'tomato', show.legend = FALSE) +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = low),
col = 'tomato', linetype = 'dashed') +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = high),
col = 'tomato', linetype = 'dashed') +
scale_x_continuous(breaks = c(0, pi/2, pi, 3*pi/2, 2*pi),
labels = c(0,expression(pi/2), expression(pi),
expression(3*pi/2), expression(2*pi))) +
labs(x = expression(theta), y = 'Deviation (in.)')  +
theme(axis.text	= element_text(size = 16),
axis.title = element_text(size = 20),
legend.text = element_text(size = 18)) +
scale_linetype_manual(values = c('dashed', 'solid'))
}
# -- Receive message that a model already exists for this shape & process combination
DELETE('api.amapi.io/v1/models?shape=circle&process=a')
baseline_model = POST('api.amapi.io/v1/models?shape=circle&process=a')
# -- Getting and plotting predictions
baseline_predictions = GET('api.amapi.io/v1/predict?shape=circle&process=a')
baseline_predictions_df = read.csv(textConnection(content(baseline_predictions, 'text')),
header = FALSE)
names(baseline_predictions_df) <- c('low','mean', 'high')
head(baseline_predictions_df)
# plotting
{
library(ggplot2)
names(baseline_predictions_df) = c('low','mean', 'high')
baseline_df_subset = subset(baseline_df, baseline_df$radius == 0.5)
baseline_predictions_df_subset = baseline_predictions_df[1:nrow(baseline_df_subset),]
baseline_predictions_df_subset$angle = baseline_df$angle[1:nrow(baseline_df_subset)]
baseline_predictions_df_subset$radius = baseline_df$radius[1:nrow(baseline_df_subset)]
library(ggplot2)
ggplot() +
geom_point(data = baseline_df_subset, aes(x = angle, y = deviation), col = 'grey70', size = 1) +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = mean),
col = 'tomato', show.legend = FALSE) +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = low),
col = 'tomato', linetype = 'dashed') +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = high),
col = 'tomato', linetype = 'dashed') +
scale_x_continuous(breaks = c(0, pi/2, pi, 3*pi/2, 2*pi),
labels = c(0,expression(pi/2), expression(pi),
expression(3*pi/2), expression(2*pi))) +
labs(x = expression(theta), y = 'Deviation (in.)')  +
theme(axis.text	= element_text(size = 16),
axis.title = element_text(size = 20),
legend.text = element_text(size = 18)) +
scale_linetype_manual(values = c('dashed', 'solid'))
}
# -- Example of uploading a file
#POST('api.amapi.io/v1/data?shape=circle&process=a',
#     body = list(uploadFile= upload_file("data_amapi/data_processA_circle.csv")),
#     encode = "multipart")
# -- How to get the posted data
baseline_data = GET('api.amapi.io/v1/data?shape=circle&process=a')
# parsing data to obtain the correct format
baseline_df <- read.csv(textConnection(content(baseline_data, 'text')),
header = FALSE)
names(baseline_df) <- c('deviation','angle', 'radius')
head(baseline_df)
# plotting
{
library(ggplot2)
names(baseline_predictions_df) = c('low','mean', 'high')
baseline_df_subset = subset(baseline_df, baseline_df$radius == 0.5)
baseline_predictions_df_subset = baseline_predictions_df[1:nrow(baseline_df_subset),]
baseline_predictions_df_subset$angle = baseline_df$angle[1:nrow(baseline_df_subset)]
baseline_predictions_df_subset$radius = baseline_df$radius[1:nrow(baseline_df_subset)]
library(ggplot2)
ggplot() +
geom_point(data = baseline_df_subset, aes(x = angle, y = deviation), col = 'grey70', size = 1) +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = mean),
col = 'tomato', show.legend = FALSE) +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = low),
col = 'tomato', linetype = 'dashed') +
geom_line(data = baseline_predictions_df_subset, aes(x = angle, y = high),
col = 'tomato', linetype = 'dashed') +
scale_x_continuous(breaks = c(0, pi/2, pi, 3*pi/2, 2*pi),
labels = c(0,expression(pi/2), expression(pi),
expression(3*pi/2), expression(2*pi))) +
labs(x = expression(theta), y = 'Deviation (in.)')  +
theme(axis.text	= element_text(size = 16),
axis.title = element_text(size = 20),
legend.text = element_text(size = 18)) +
scale_linetype_manual(values = c('dashed', 'solid'))
}
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
tib <- tibble(fiftytypes=sample(1:100, 50), sumfour=sample(1:100, 5), highfiveplease=5)
df <- data.frame(fiftytypes=sample(1:100, 50), sumfour=sample(1:100, 5), highfiveplease=5)
tib <- as_tibble(df)
tibble(fiftytypes=sample(1:100, 50), sumfour=sample(1:100, 5), highfiveplease=5)
data.frame(fiftytypes=sample(1:100, 50), sumfour=sample(1:100, 50), highfiveplease=5)
?rename
library(dplyr)
install.packages("tidyverse")
library(dplyr)
rename(tib, fiftytypes=50types, sumfour=sum4, highfiveplease=high5please)
# 1f
df <- data.frame(fiftytypes=sample(1:100, 50), sumfour=sample(1:100, 5), highfiveplease=5)
tib <- tibble(df)
rename(tib, fiftytypes=50types, sumfour=sum4, highfiveplease=high5please)
rename(tib, fiftytypes="50types", sumfour=sum4, highfiveplease=high5please)
rename(tib, fiftytypes="50types", sumfour="sum4", highfiveplease=high5please)
rename(tib, fiftytypes="50types", sumfour="sum4", highfiveplease="high5please")
rename(tib, 50types=fiftytypes, sum4=sumfour, high5please=highfiveplease)
rename(tib, "50types"=fiftytypes, "sum4"=sumfour, "high5please"=highfiveplease)
rename(tib, 50types="fiftytypes", sum4="sumfour", high5please="highfiveplease")
rename(tib, "50types"="fiftytypes", "sum4"="sumfour", "high5please"="highfiveplease")
rename(tib, "50types"=fiftytypes, "sum4"="sumfour", "high5please"="highfiveplease")
tib
# 1f
df <- data.frame(fiftytypes=sample(1:100, 50), sumfour=sample(1:100, 5), highfiveplease=5)
tib <- as_tibble(df)
rename(tib, "50types"=fiftytypes, "sum4"="sumfour", "high5please"="highfiveplease")
rename(tib, 50types=fiftytypes, "sum4"="sumfour", "high5please"="highfiveplease")
rename(tib, "50types"=fiftytypes, sum4="sumfour", high5please="highfiveplease")
tib <- rename(tib, "50types"=fiftytypes, sum4="sumfour", high5please="highfiveplease")
df <- rename(df, "50types"=fiftytypes, sum4="sumfour", high5please="highfiveplease")
df
df
class(df)
data.frame("5"=5)
# 1f
df <- data.frame(fiftytypes=sample(1:100, 50), sumfour=sample(1:100, 5), highfiveplease=5)
tib <- as_tibble(df)
tib <- rename(tib, 50types=fiftytypes, sum4=sumfour, high5please=highfiveplease)
tib <- rename(tib, `50types`=fiftytypes, sum4=sumfour, high5please=highfiveplease)
tib
df <- rename(df, 50types=fiftytypes, sum4=sumfour, high5please=highfiveplease)
df <- rename(df, `50types`=fiftytypes, sum4=sumfour, high5please=highfiveplease)
df
df$`50types`
data.frame(x=5)
data.frame(5=5)
data.frame(5=x)
data.frame("5"=5)
data.frame("5"=5, check.names=F)
tib <- tibble(fiftytypes=sample(1:100, 50), sumfour=sample(1:100, 5), highfiveplease=5)
tib <- tibble(fiftytypes=sample(1:100, 50), sumfour=sample(1:100, 50), highfiveplease=5)
tib
# 1f
df <- data.frame(fiftytypes=sample(1:100, 50), sumfour=sample(1:100, 5), highfiveplease=5)
tib <- as_tibble(df)
df
df <- data.frame(fiftytypes=sample(1:100, 50), sumfour=sample(1:100, 5), highfiveplease=5)
tib <- as_tibble(df)
tib
data.frame(x=1, x=3)
data.frame(x=1, x=3, check.names=False)
data.frame(x=1, x=3, check.names=F)
tiblle(x=1, x=3)
tibble(x=1, x=3)
df <- data.frame(x=1, x=3)
df
df <- data.frame(x=1, x=3, check.names = F)
df
df$x
tib <- tibble(x=1, x=3)
```{r, echo=F}
# 2a
couples <- read_csv("https://raw.githubusercontent.com/fastforwardlabs/couples-lime/master/couples.csv")
library(readr)
# 2a
couples <- read_csv("https://raw.githubusercontent.com/fastforwardlabs/couples-lime/master/couples.csv")
couples
couples$income
library(stringr)
str_extract(couples$income, (?:\D*(\d+)){2})
str_extract(couples$income, '(?:\D*(\d+)){2}')
str_extract(couples$income, '(?:\\D*(\d+)){2}')
str_extract(couples$income, '(?:\\D*(\\d+)){2}')
str_extract(couples$income, '(?:\\D*(\\d+)){2}')
str_extract(couples$income, '(?:\\D*(\\d+)){1}')
str_extract(couples$income[1:3], '[[:digit:]]+')
str_extract(couples$income, '(?:\\D*(\\d+)){1}')
str_extract(str_replace(couples$income, ',', ''), '(?:\\D*(\\d+)){1}')
str_extract(str_replace(couples$income, ',', ''), '(?:\\D*(\\d+)){1}')
str_extract(str_replace(couples$income, ',', ''), '(?:\\D*(\\d+)){1}')
str_extract(str_replace(couples$income, ',', ''), '(?:\\D*(\\d+)){2}')
str_extract(str_replace(couples$income, ',', ''), '(?:\\D*(\\d+)){1}')
str_extract(str_replace(couples$income, ',', ''), '(?:\\D*(\\d+)){1}')
str_replace(couples$income, ',', '')
str_extract(str_replace_all(couples$income, ',', ''), '(?:\\D*(\\d+)){1}')
str_extract(str_replace_all(couples$income, ',', ''), '(?:\\D*(\\d+)){2}')
str_extract(str_replace_all(couples$income, ',', ''), '/(\d)/g')
str_extract(str_replace_all(couples$income, ',', ''), '/(\\d)/g')
str_extract(str_replace_all(couples$income, ',', ''), '/(\\d)/')
str_extract(str_replace_all(couples$income, ',', ''), '(\\d)')
str_extract(str_replace_all(couples$income, ',', ''), '\D*(?:\d+\D+){1}0*(\d+)')
str_extract(str_replace_all(couples$income, ',', ''), '\\D*(?:\\d+\\D+){1}0*(\\d+)')
str_extract(str_replace_all(couples$income, ',', ''), '\\D*(?:\\d+\\D+){0}0*(\\d+)')
str_extract(str_replace_all(couples$income, ',', ''), '\\D*(\\d+).*')
str_replace_all(couples$income, ',', '')
str_split(str_replace_all(couples$income, ',', ''), ' to ')
str_split(str_replace_all(couples$income, ',', ''), ' to ')[1]
str_split(str_replace_all(couples$income, ',', ''), ' to ')[[1]]
str_split(str_replace_all(couples$income, ',', ''), ' to ')[[1]]
str_split(str_replace_all(couples$income, ',', ''), ' to ')[[1]][1]
str_split(str_replace_all(couples$income, ',', ''), ' to ')[[1]][2]
str_split(str_replace_all(couples$income, ',', ''), ' to ')[[1]][2]
unique(couples$income)
couples <- mutate(couples, age_categories = case_when(age < 20 ~ '[0,20)',
age %in% 20:64 ~ '[20,65)',
TRUE ~ '[65+]'))
couples
couples$age_diff_abs
library(ggplot2)
plot <- ggplot(couples$age_diff_abs) +
geom_boxplot()
plot <- ggplot(couples$age_diff_abs) + geom_boxplot()
couples
plot <- ggplot(couples, aes=(x=age_diff_abs,y=age_categories)) + geom_boxplot()
plot <- ggplot(couples, aes=(x=age_diff_abs, y=age_categories)) + geom_boxplot()
plot <- ggplot(couples, aes=(x=age_categories, y=age_diff_abs)) + geom_boxplot()
plot <- ggplot(couples, aes(x=age_categories, y=age_diff_abs)) + geom_boxplot()
plot
couples %>%
filter(age_diff_abs < 60) %>%
ggplot(aes(x=age_categories, y=age_diff_abs)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference')
couples
couples_plot <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs)) +
geom_boxplot(outlier.colour='red') +
labs(x='Age group', y='Absolute age difference')
couples_plot
# 3c
couples_plot <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs)) +
geom_boxplot(outlier.colour='red') +
labs(x='Age group', y='Absolute age difference')
couples_plot
# Once they know pipelines
couples %>%
filter(age_diff_abs < 60) %>%
ggplot(aes(x=age_categories, y=age_diff_abs)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference')
# 3c
couples_plot <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs)) +
geom_boxplot(outlier.colour='red') +
labs(x='Age group', y='Absolute age difference')
# 3b
couples_subset <- filter(couples, age_diff_abs < 60)
# 3c
couples_plot <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs)) +
geom_boxplot(outlier.colour='red') +
labs(x='Age group', y='Absolute age difference')
couples_plot
install.packages("ggthemes")
# 3c
couples_plot <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs)) +
geom_boxplot(outlier.colour='red') +
labs(x='Age group', y='Absolute age difference')
couples_plot
couples_plot + scale_color_colorblind()
library(ggthemes)
couples_plot + scale_color_colorblind()
?scale_color_colorblind
couples_plot + theme_igray() + scale_color_colorblind()
# 3c
couples_plot <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs, fill="age_group")) +
geom_boxplot(outlier.colour='red') +
labs(x='Age group', y='Absolute age difference')
couples_plot
# 3c
couples_plot <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot(outlier.colour='red') +
labs(x='Age group', y='Absolute age difference')
couples_plot
couples_plot + theme_igray() + scale_color_colorblind()
couples_plot + scale_color_colorblind()
couples_plot <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference', fill = 'Age group')
couples_plot
couples_subset <- filter(couples, age_diff_abs < 60)
couples_plot <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference')
couples_plot
couples_plot <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference', fill='Age group')
couples_plot
couples_plot <- ggplot(couples, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference', fill = 'Age group')
couples_plot
couples_subset <- filter(couples, age_diff_abs < 60)
couples_plot <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference')
couples_plot
couples_subset <- filter(couples, age_diff_abs < 60)
couples_plot <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference', fill='Age group')
couples_plot
# Once they know pipelines
couples %>%
filter(age_diff_abs < 60) %>%
ggplot(aes(x=age_categories, y=age_diff_abs)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference', fill='Age group')
# Once they know pipelines
couples %>%
filter(age_diff_abs < 60) %>%
ggplot(aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference', fill='Age group')
# There are different ways to modify the axes labels. Another example is:
ggplot(couples, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
xlab('Age group') +
ylab('Absolute age difference')  +
scale_fill_discrete(name='Age group')
# 3c
couples_plot <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot(outlier.colour='red') +
labs(x='Age group', y='Absolute age difference', fill='Age group')
couples_plot
# 3d
couples_plot <- couples_plot +
geom_text(aes(label = ifelse(age_diff_abs > 25, caseid_new, NA)),
nudge_x = .25,
check_overlap = T)
couples_plot
couples_plot + scale_fill_colorblind()
# 3e
couples_plot + scale_fill_colorblind()
# 3e
couples_plot +
scale_fill_colorblind() +
geom_boxplot(outlier.colour="#D55E00")
plot_3e
# 3e
couples_plot_3e <- couples_plot +
scale_fill_colorblind() +
geom_boxplot(outlier.colour="#D55E00")
couples_plot_3e
# 3f
gridExtra::grid.arrange(couples_plot_3a, couples_plot_3b, couples_plot_3e, ncol = 3)
# 3a
couples_plot_3a <- ggplot(couples, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference', fill='Age group')
couples_plot_3a
# 3b
couples_subset <- filter(couples, age_diff_abs < 60)
couples_plot_3b <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference', fill='Age group')
couples_plot_3b
# 3f
gridExtra::grid.arrange(couples_plot_3a, couples_plot_3b, couples_plot_3e, ncol = 3)
install.packages(gridExtra)
install.packages("gridExtra")
library(gridExtra)
# 3f
gridExtra::grid.arrange(couples_plot_3a, couples_plot_3b, couples_plot_3e, ncol = 3)
# 3a
couples_plot_3a <- ggplot(couples, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference', fill='Age group')
# There are different ways to modify the axes labels. Another example is:
ggplot(couples, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
xlab('Age group') +
ylab('Absolute age difference')  +
scale_fill_discrete(name='Age group')
couples_plot <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference', fill='Age group')
# Once they know pipelines
couples %>%
filter(age_diff_abs < 60) %>%
ggplot(aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference', fill='Age group')
# 3c
couples_plot_3c <- ggplot(couples_subset, aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot(outlier.colour='red') +
labs(x='Age group', y='Absolute age difference', fill='Age group')
couples_plot_3c
# 3d
couples_plot_3d <- couples_plot_3c +
geom_text(aes(label = ifelse(age_diff_abs > 25, caseid_new, NA)),
nudge_x = .25,
check_overlap = T)
couples_plot_3d
# 3e
couples_plot_3e <- couples_plot_3d +
scale_fill_colorblind() +
geom_boxplot(outlier.colour="#D55E00")
# 3f
gridExtra::grid.arrange(couples_plot_3a, couples_plot_3b, couples_plot_3e, ncol = 3)
# 3f
gridExtra::grid.arrange(couples_plot_3a, couples_plot_3c, couples_plot_3e, ncol = 3)
gridExtra::grid.arrange(couples_plot_3a, couples_plot_3c, couples_plot_3e, layout_matrix = our_layout)
# 3g
our_layout <- rbind(c(1,1),
c(2,3))
gridExtra::grid.arrange(couples_plot_3a, couples_plot_3c, couples_plot_3e, layout_matrix = our_layout)
# Once they know pipelines
couples %>%
filter(age_diff_abs < 60) %>%
ggplot(aes(x=age_categories, y=age_diff_abs, fill=age_categories)) +
geom_boxplot() +
labs(x='Age group', y='Absolute age difference', fill='Age group')
# 2d
couples[, .(sum(children)) ,by = .(religion)][order(-V1)]
# 1d
couples <- fread("https://raw.githubusercontent.com/fastforwardlabs/couples-lime/master/couples.csv")
library("data.table")
install.packages("data.table")
# 1d
couples <- fread("https://raw.githubusercontent.com/fastforwardlabs/couples-lime/master/couples.csv")
library(data.table)
# 1d
couples <- fread("https://raw.githubusercontent.com/fastforwardlabs/couples-lime/master/couples.csv")
# 2a
couples[, income := str_remove_all(couples[, income], ',')]
matches <- regmatches(couples[, income], gregexpr("[[:digit:]]+", couples[, income]))
sum_string_list <- function(x) { mean(as.numeric(x)) }
couples[, income := sapply(matches, sum_string_list)]
# 2d
couples[, .(sum(children)) ,by = .(religion)][order(-V1)]
setwd("~/Dropbox/work/datamine/wearables-book")
renv
install.packages("renv")
renv::init()
